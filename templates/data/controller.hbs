import { ControllerTemplate } from '@utils/controller.template';
import { getManager } from 'typeorm';
import { Context } from '@app/context';
import { BadRequestError } from '@utils/errors';
import { {{ pascalCase model }}Model } from './model';
import { {{ pascalCase model }}View } from './view';

type QueryType = '{{ pascalCase model }}ById';

const query = () => getManager().createQueryBuilder({{ pascalCase model }}Model, '{{ snakeCase model }}')

export class {{ pascalCase model }}Controller extends ControllerTemplate<{{ pascalCase model }}Model, QueryType> {
  constructor(context: Context) {
    super(context);
    this.loaders['{{ pascalCase model }}ById'] = this.wrapQueryInDataLoader(async (ids: ReadonlyArray<string>) => {
      const {{ camelCase model }}s = await query().where('{{ snakeCase model }}.id in (:...ids)', { ids }).getMany();
      return this.orderResultsByIds(ids, {{ camelCase model }}s);
    });
  }

  

  public get{{ pascalCase model }}ById = async (id: string) => {
    const {{ camelCase model }} = await this.loaders['{{ pascalCase model }}ById'].load(id);
    return {{ camelCase model }} ? new {{ pascalCase model }}View(this.context, {{ camelCase model }}) : null;
  }

  public get{{ pascalCase model }}sByIds = async (ids: Array<string>) => {
    const {{ camelCase model }}s = await this.loaders['{{ pascalCase model }}ById'].loadMany(ids);
    return {{ camelCase model }}s.map({{ camelCase model }}OrError => {
      if ({{ camelCase model }}OrError instanceof Error) {
        throw new BadRequestError({{ camelCase model }}OrError.message)
      } else {
        return new {{ pascalCase model }}View(this.context, {{ camelCase model }}OrError)
      }
    });
  }
}